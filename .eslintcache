[{"/Users/conormullan/Downloads/atmapp/atm-app/src/index.js":"1","/Users/conormullan/Downloads/atmapp/atm-app/src/App.js":"2","/Users/conormullan/Downloads/atmapp/atm-app/src/reportWebVitals.js":"3","/Users/conormullan/Downloads/atmapp/atm-app/src/components/SplashScreen.js":"4","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Dashboard.js":"5","/Users/conormullan/Downloads/atmapp/atm-app/src/components/ConfirmationDialog.js":"6","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Input.jsx":"7","/Users/conormullan/Downloads/atmapp/atm-app/src/components/PinCode.js":"8","/Users/conormullan/Downloads/atmapp/atm-app/src/components/NumPad.jsx":"9","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Calculations.js":"10"},{"size":544,"mtime":1611781679801,"results":"11","hashOfConfig":"12"},{"size":6928,"mtime":1611781882924,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610885278353,"results":"14","hashOfConfig":"12"},{"size":1464,"mtime":1611785613950,"results":"15","hashOfConfig":"12"},{"size":7577,"mtime":1611841881769,"results":"16","hashOfConfig":"12"},{"size":2653,"mtime":1611837156208,"results":"17","hashOfConfig":"12"},{"size":790,"mtime":1611787252971,"results":"18","hashOfConfig":"12"},{"size":2002,"mtime":1611842087671,"results":"19","hashOfConfig":"12"},{"size":2466,"mtime":1611838427741,"results":"20","hashOfConfig":"12"},{"size":2666,"mtime":1611788146384,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"m6xkq8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"/Users/conormullan/Downloads/atmapp/atm-app/src/index.js",[],["49","50"],"/Users/conormullan/Downloads/atmapp/atm-app/src/App.js",[],"/Users/conormullan/Downloads/atmapp/atm-app/src/reportWebVitals.js",[],"/Users/conormullan/Downloads/atmapp/atm-app/src/components/SplashScreen.js",["51","52","53","54"],"import React, { useCallback, useState} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Collapse from '@material-ui/core/Collapse';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCreditCard } from \"@fortawesome/free-solid-svg-icons\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../App.css\";\n\n\nconst SplashScreen = (props) => {\n\n  //Declare variables\n  const [checked, setChecked] = React.useState(true)\n\n  //Progress to next screen once clicked\n  const history = useHistory()\n  const handleOnClick = useCallback(() => history.push(\"/PinCode\"), [\n    history,\n  ]);\n\n  //Timeout is necessary to display animation\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n    window.setTimeout(handleOnClick, 1000);\n  };\n\n  return (\n    //JSX for Splash Screen\n    <div className={'root'}>\n      <div className={'behind'}>Please insert your card to continue.</div>\n      <div className={'cardSlot'}></div>\n      <div className={\"cardDiv\"}>\n        \n        <Collapse direction=\"down\" in={checked} mountOnEnter unmountOnExit>\n          <div >\n            <button className= 'cardBtn' onClick={handleChange}><FontAwesomeIcon icon={faCreditCard} /></button>\n          </div>\n        </Collapse>\n      </div>\n    </div>\n  );\n}\n\nexport default SplashScreen;","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Dashboard.js",["55","56"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport BalanceCalcu from \"./Calculations.js\";\nimport ConfirmationDialog from \"./ConfirmationDialog.js\";\nimport \"../css/Dashboard.css\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport twnote from \"../images/twnote.png\";\nimport fvnote from \"../images/fvnote.png\";\nimport tnnote from \"../images/tnnote.png\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport NumPad from \"./NumPad\";\n\nconst Dashboard = (props) => {\n\n  //Declare Variables\n  const tw = 20;\n  const tn = 10;\n  const fv = 5;\n  const initDisp = { 20: 0, 10: 0, 5: 0, total: \"\" };\n  const [disp, setDisp] = useState({ 20: 0, 10: 0, 5: 0, total: \"\" });\n  const [open, setOpen] = useState(false);\n  const [showDialog, setShowDialog] = useState(false);\n  const [state, setState] = useState({ 20: 7, 10: 15, 5: 4 });\n  const [isLoading, setIsLoading] = useState(false);\n  const [disabled, isDisabled] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const [checked, setChecked] = useState(false);\n  const [runBal, setRunBal] = useState(false);\n  const [atmBalance, setAtmBalance] = useState(310);\n  const [balance, setBalance] = useState(220);\n\n  const history = useHistory();\n\n  //Return to Splash Screen when clicked\n  const cancel = useCallback(() => history.push(\"/SplashScreen\"), [history]);\n  const handleOnClick = useCallback(() => history.push(\"/SplashScreen\"), [\n    history,\n  ]);\n  \n  //Styling conditionals to update on state changes\n  let style = { backgroundColor: \"transparent\" };\n  let balWarn = \"snd white\";\n  if (!visible) style.display = \"none\";\n  if (balance < 0)  balWarn = \"snd red\";\n\n  //Clear input\n  function cancelCourse() {\n    setDisp((prevState) => ({\n      ...prevState,\n      total: \"\",\n    }));\n    if (disabled) {\n      isDisabled(false);\n    }\n  }\n\n  //Switch state to trigger confirm withdrawl dialog\n  function confirmWithdraw() {\n    setShowDialog(true);\n  }\n\n  function submitHandler(e){\n    e.preventDefault()\n  }\n\n  //Use Effect statements to watch state changes and trigger relevant actions \n  useEffect(() => {\n    setChecked((prevLoading) => !prevLoading);\n  }, [visible]);\n\n  useEffect(() => {\n    setChecked((prevLoading) => !prevLoading);\n  }, [visible]);\n\n  useEffect(() => {\n    if (disp.total > atmBalance) {\n      alert(\"There is not enough money in the ATM Sorry\");\n    } else setRunBal((prevLoading) => !prevLoading);\n  }, [isLoading]);\n\n  useEffect(() => {\n    const calcBal = Number(20 * state[tw] + 10 * state[tn] + 5 * state[fv]);\n    setAtmBalance(calcBal);\n  }, [visible]);\n\n  //Reset the input and return to input screen\n  function reset() {\n    setShowDialog(false);\n    setVisible((prevLoading) => !prevLoading);\n    setDisp(initDisp);\n  }\n\n  //Update the input when number is entered\n  function handleChange(e){\n    const { name, value } = e.target;\n    setDisp((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  //Create JSX code for the dialog component to confirm if the user wishes to withdraw the amount\n  const rn = (\n    <ConfirmationDialog\n      balance={balance}\n      open={open}\n      setOpen={setOpen}\n      setBalance={setBalance}\n      setIsLoading={setIsLoading}\n      isLoading={isLoading}\n      setVisible={setVisible}\n      isDisabled={isDisabled}\n      showDialog={showDialog}\n      setShowDialog={setShowDialog}\n      value={disp.total}\n      limits={setState}\n    >\n      <CheckCircleOutlineIcon />\n    </ConfirmationDialog>\n  );\n\n\n  return (\n\n\n    <React.Fragment>\n\n      {/* User Information, balance and overdraft */}\n      <h2 className=\"name\">Welcome Michael</h2>\n      <div id=\"dashboardWrap\">\n        <div className=\"topWrap\">\n          <div className=\"three\">\n            <div className=\"ca first\">\n              <p>Balance</p>\n              <p className={balWarn}>£{balance}.00</p>\n            </div>\n            <div className=\"ca last\">\n              <p>Overdraft Limit</p>\n              <p className={\"snd \"}>£100.00</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Numberpad and input elements */}\n        <div className={\"twoCards\"}></div>\n        <form id=\"formid\" onSubmit={submitHandler}>\n          <input\n            className=\"inputAmount\"\n            value={disp.total + \".00\"}\n            type=\"numeric\"\n            style={{ fontFamily: \"BebasNeue-Regular\" }}\n            onChange={handleChange}\n            name=\"total\"\n            disabled={disabled}\n            readOnly\n          />\n        </form>\n        <div style={style}>\n          <NumPad\n            disp={disp}\n            open={open}\n            setOpen={setOpen}\n            setDisp={setDisp}\n            leftName={<HighlightOffIcon></HighlightOffIcon>}\n            rightName={rn}\n            leftAction={cancelCourse}\n            rightAction={confirmWithdraw}\n            showDialog={showDialog}\n            setShowDialog={setShowDialog}\n          ></NumPad>\n          <div className=\"row\">\n            <button className=\"withdrBtn cancel\" onClick={cancel}>CANCEL TRANSACTION</button>\n          </div>\n        </div>\n\n        <div className=\"bN\">\n        {/*Only show the cash dispensed after the amount has been confirmed */}\n          {!visible ? (\n            <div className=\"slideInD\">\n              {/*Warn user if they are in their overdraft */}\n              {balance < 0 ? (\n                <div className=\"ovrDrft\">WARNING YOU ARE IN YOUR OVERDRAFT</div>\n              ) : null}\n              {/*Transition Animation */}\n              <Collapse direction=\"down\" in={!checked}>\n\n                {/*Based on the calculated cash distribution, display the images of the relevant note and amount to the right */}\n                <div>\n                  <p>HERE IS YOUR £{disp.total} CASH:</p>\n                  {disp[tw] ? (\n                    <div className=\"dispNotes\">\n                      <img alt={\"\"} src={twnote}/>\n                      <span>X{disp[tw]}</span>\n                    </div>\n                  ) : null}\n                  {disp[tn] ? (\n                    <div className=\"dispNotes\">\n                      <img alt={\"\"} src={tnnote}/>\n                      <span>X{disp[tn]}</span>\n                    </div>\n                  ) : null}\n                  {disp[fv] ? (\n                    <div className=\"dispNotes\">\n                      <img alt={\"\"} src={fvnote}/>\n                      <span>X{disp[fv]}</span>\n                    </div>\n                  ) : null}\n\n                  <div className=\"optBtn\">\n                    <button className=\"withdrBtn cancel\" onClick={handleOnClick}>\n                      EJECT CARD\n                    </button>\n                    <button className=\"withdrBtn another\" onClick={reset}>\n                      MAKE ANOTHER WITHDRAWL?\n                    </button>\n                  </div>\n                </div>\n              </Collapse>\n\n              {runBal && (\n                <BalanceCalcu\n                  state={state}\n                  setState={setState}\n                  disp={disp}\n                  value={disp[\"total\"]}\n                  setDisp={setDisp}\n                  isLoading={isLoading}\n                  setIsLoading={setIsLoading}\n                  open={open}\n                  setOpen={setOpen}\n                ></BalanceCalcu>\n              )}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Dashboard;\n","/Users/conormullan/Downloads/atmapp/atm-app/src/components/ConfirmationDialog.js",["57","58","59"],"import React, { useEffect } from 'react';\nimport ReactDOM from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst ConfirmationDialog = (props) =>{\n\n  //Import props\n  const {balance} = props;\n  const {setBalance} = props;\n  const {value} = props;\n  const {setIsLoading} = props;\n  const {isDisabled} = props;\n  const {setVisible} = props;\n  const {showDialog} = props;\n  const {setShowDialog} = props;\n  const {setOpen} = props;\n  const {open} = props;\n\n  //Toggle values when state changes\n  useEffect(()=>{\n    if(open){\n      setOpen(false);\n    }\n    if(!open && showDialog==true){\n      setOpen(true);\n    }\n\n  }, [showDialog] );\n\n  //Toggle values when close is clicked\n  const handleClose = () => {\n    setShowDialog(false);\n    setOpen(false)\n  };\n\n  const handleOpen = () => {\n    //Only allow withdrawl if within constraints of balance/overdraft\n    if(balance-value>=-100){\n        if(value%5===0){\n          setIsLoading((prevLoading) => !prevLoading)\n          setVisible((prevLoading) => !prevLoading)\n          setBalance(prevBal => prevBal - value);\n          setOpen(false)\n          isDisabled(true)\n        }\n        else alert ('This machine only dispenses £5, £10 and £20 notes.');\n      }\n      //If exceeding the limits, throw an error\n      if(balance-value<-100) alert('You have surpassed your overdraft amount');\n      setShowDialog(false);\n  }\n  \n  return (\n    <React.Fragment>\n      {props.children}\n      {open ? (\n        <div>\n        <Dialog\n          open={open}\n          onClose={()=>handleClose()}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{\"Confirm Cash Withdrawl\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Are you sure you want to withdraw £{props.value}?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={()=>handleClose()} color=\"primary\">\n              Cancel\n            </Button>\n            <Button id='openBtn' onClick={()=>handleOpen()} color=\"primary\" autoFocus>\n              Confirm\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>) : null}\n    </React.Fragment>\n  );\n}\n\nexport default ConfirmationDialog;","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Input.jsx",[],"/Users/conormullan/Downloads/atmapp/atm-app/src/components/PinCode.js",["60","61"],"import React from \"react\";\nimport \"../App.css\";\nimport NumPad from \"./NumPad\";\nimport Input from \"./Input\";\nimport { useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\n\nconst PinCode = (props) => {\n\n  //Declare variables, sample pin is 1234\n  const correctPin = 1234;\n  const fill = 'transparent';\n  const cross = <HighlightOffIcon />\n  const tick = <CheckCircleOutlineIcon />;\n\n  //Import props\n  const {showDialog} = props;\n  const {setShowDialog}  = props;\n\n  //Declare Hooks\n  const [input, setInput] = useState({total: ''});\n  const [validInput, setValidInput] = useState('calc-wrapper ')\n\n  //Next screen is Dashboard\n  const history = useHistory();\n  const handleOnClick = useCallback(() => history.push(\"/Dashboard\"), [\n    history,\n  ]);\n\n  //Check if correct pin and continue\n  function verifyPin(pinValue) {\n    if (correctPin == pinValue) {\n      setValidInput('calc-wrapper ');\n      handleOnClick();\n    }\n    if (correctPin != pinValue) {\n      setValidInput('calc-wrapper invalidinput');\n      setInput({total: \"\"});\n    }\n  }\n\n  //Clear inpit\n  function clearInput(){\n    setInput({total: \"\"});\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"behind\">Please enter your PIN to continue.</div>\n      <div className=\"app\">\n        <div className={validInput}>\n        <Input len={input['total'].length} type=\"password\" fill={fill} input={input['total']} />\n          <div className=\"row\"></div>\n          <NumPad\n            disp={input}\n            showDialog={showDialog}\n            setDisp={setInput}\n            setShowDialog={setShowDialog}\n            leftName={cross}\n            rightName={tick}\n            leftAction={clearInput}\n            rightAction={() => verifyPin(input['total'])}\n          ></NumPad>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PinCode;\n","/Users/conormullan/Downloads/atmapp/atm-app/src/components/NumPad.jsx",["62","63","64","65"],"import React, { useState, useEffect } from \"react\";\nimport ConfirmationDialog from \"./ConfirmationDialog\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\n\nconst NumPad = (props) => {\n  //Import Props\n  const { leftName } = props;\n  const { rightName } = props;\n  const { disp } = props;\n  const { setDisp } = props;\n  const { leftAction } = props;\n  const { rightAction } = props;\n\n  //Update the value field to the total\n  function addToInput(val) {\n    setDisp((prevState) => ({\n      ...prevState,\n      total: disp.total + val,\n    }));\n  }\n\n  //Action button functions\n  function doSomethingLeft() {\n    leftAction();\n  }\n  function doSomethingRight() {\n    rightAction();\n  }\n\n  return (\n    //JSX for numberpad\n    <div className=\"app\">\n      <div className=\"calc-wrapper\">\n        <div className=\"row\">\n          <button className=\"button-wrapper btnsvn\" onClick={() => addToInput(7)}>\n            7\n          </button>\n          <button className=\"button-wrapper btnegt\" onClick={() => addToInput(8)}>\n            8\n          </button>\n          <button className=\"button-wrapper btnnne\" onClick={() => addToInput(9)}>\n            9\n          </button>\n        </div>\n        <div className=\"row\">\n          <button className=\"button-wrapper btnfr\" onClick={() => addToInput(4)}>\n            4\n          </button>\n          <button className=\"button-wrapper btnfv\" onClick={() => addToInput(5)}>\n            5\n          </button>\n          <button className=\"button-wrapper btnsx\" onClick={() => addToInput(6)}>\n            6\n          </button>\n        </div>\n        <div className=\"row\">\n          <button className=\"button-wrapper btnon\" onClick={() => addToInput(1)}>\n            1\n          </button>\n          <button className=\"button-wrapper btntw\" onClick={() => addToInput(2)}>\n            2\n          </button>\n          <button className=\"button-wrapper btnthr\" onClick={() => addToInput(3)}>\n            3\n          </button>\n        </div>\n        <div className=\"row\">\n          <button className=\"button-wrapper clearBtn\" onClick={() => doSomethingLeft()}>\n            {leftName}\n          </button>\n          <button className=\"button-wrapper btnzr\" onClick={() => addToInput(0)}>\n            0\n          </button>\n          <button className=\"button-wrapper confirmBtn\" onClick={() => doSomethingRight()}>\n            {rightName}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NumPad;\n","/Users/conormullan/Downloads/atmapp/atm-app/src/components/Calculations.js",["66","67","68","69","70","71","72"],"import React, { useEffect } from \"react\";\n\nconst Calculations = (props) => {\n  \n  //Declare variables\n  const five = 5;\n  const ten = 10;\n  const twenty = 20;\n\n  //Declare variables\n  const { state } = props;\n  const { disp } = props;\n\n  const value = disp[\"total\"];\n\n\n  //Parameters are amount - the amount requested and limits - the amount left in the atm\n  const GetMoney = (amount, limits) => {\n  //Greedy algorithm to select the distribution of notes based on the parameters supply and demand\n    let recur = (amount, nominals) => {\n      if (amount == 0) return {};\n      if (!nominals.length) return;\n      let nominal = nominals[0];\n      let count = Math.min(limits[nominal], Math.floor(amount / nominal));\n      for (let i = count; i >= 0; i--) {\n        let result = recur(amount - i * nominal, nominals.slice(1));\n        if (result)\n          return i\n            ? {\n                [nominal]: i,\n                ...result,\n              }\n            : result;\n      }\n    };\n    //Recur function until total amount is reached\n    return recur(\n      amount,\n      Object.keys(state)\n        .map(Number)\n        .sort((a, b) => b - a)\n    );\n  };\n\n  //Loop through the atm note inventory and update the number of notes accordingly\n  function adjustStock(output) {\n    for (var key in state) {\n      if (state.hasOwnProperty(key)) {\n        for (var keyb in output) {\n          if (output.hasOwnProperty(keyb)) {\n            if (key == keyb) {\n              state[key] = state[key] - output[keyb];\n              if (state[key] <= 0) {\n                delete state[key];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  //Call the GetMoney function and store results as an array\n  const returnval = GetMoney(value, state);\n\n  //Methods to update the dispensed state based on the note value\n  const setTw = () => {\n    props.setDisp((prevState) => ({\n      ...prevState,\n      20: returnval[20],\n    }));\n  };\n  const setTn = () => {\n    props.setDisp((prevState) => ({\n      ...prevState,\n      10: returnval[10],\n    }));\n  };\n  const setFv = () => {\n    props.setDisp((prevState) => ({\n      ...prevState,\n      5: returnval[5],\n    }));\n  };\n\n  //Once the state is changed, call the update functions to update the amount of notes dispensed\n  useEffect(() => {\n    if (returnval) {\n      if (returnval[20] && returnval[20] != disp[twenty]) {\n        setTw();\n      }\n      if (returnval[10] && returnval[10] != disp[ten]) {\n        setTn();\n      }\n      if (returnval[5] && returnval[5] != disp[five]) {\n        setFv();\n      }\n    }\n  }, [state]);\n\n  adjustStock(returnval);\n  return null;\n};\n\nexport default Calculations;\n",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":30,"nodeType":"79","messageId":"80","endLine":1,"endColumn":38},{"ruleId":"77","severity":1,"message":"81","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":14},{"ruleId":"77","severity":1,"message":"82","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":13},{"ruleId":"77","severity":1,"message":"83","line":5,"column":10,"nodeType":"79","messageId":"80","endLine":5,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":80,"column":6,"nodeType":"86","endLine":80,"endColumn":17,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":85,"column":6,"nodeType":"86","endLine":85,"endColumn":15,"suggestions":"89"},{"ruleId":"77","severity":1,"message":"90","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":29,"column":27,"nodeType":"93","messageId":"94","endLine":29,"endColumn":29},{"ruleId":"84","severity":1,"message":"95","line":33,"column":6,"nodeType":"86","endLine":33,"endColumn":18,"suggestions":"96"},{"ruleId":"91","severity":1,"message":"92","line":34,"column":20,"nodeType":"93","messageId":"94","endLine":34,"endColumn":22},{"ruleId":"91","severity":1,"message":"97","line":38,"column":20,"nodeType":"93","messageId":"94","endLine":38,"endColumn":22},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"98","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"99","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":26},{"ruleId":"77","severity":1,"message":"100","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":24},{"ruleId":"77","severity":1,"message":"101","line":1,"column":8,"nodeType":"79","messageId":"80","endLine":1,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":21,"column":18,"nodeType":"93","messageId":"94","endLine":21,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":51,"column":21,"nodeType":"93","messageId":"94","endLine":51,"endColumn":23},{"ruleId":"91","severity":1,"message":"97","line":89,"column":42,"nodeType":"93","messageId":"94","endLine":89,"endColumn":44},{"ruleId":"91","severity":1,"message":"97","line":92,"column":42,"nodeType":"93","messageId":"94","endLine":92,"endColumn":44},{"ruleId":"91","severity":1,"message":"97","line":95,"column":40,"nodeType":"93","messageId":"94","endLine":95,"endColumn":42},{"ruleId":"84","severity":1,"message":"102","line":99,"column":6,"nodeType":"86","endLine":99,"endColumn":13,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Slide' is defined but never used.","'makeStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'atmBalance' and 'disp.total'. Either include them or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["107"],"'ReactDOM' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'open' and 'setOpen'. Either include them or remove the dependency array.",["108"],"Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'ConfirmationDialog' is defined but never used.","'HighlightOffIcon' is defined but never used.","'React' is defined but never used.","React Hook useEffect has missing dependencies: 'disp', 'returnval', 'setFv', 'setTn', and 'setTw'. Either include them or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [atmBalance, disp.total, isLoading]",{"range":"118","text":"119"},"Update the dependencies array to be: [state, visible]",{"range":"120","text":"121"},"Update the dependencies array to be: [open, setOpen, showDialog]",{"range":"122","text":"123"},"Update the dependencies array to be: [disp, returnval, setFv, setTn, setTw, state]",{"range":"124","text":"125"},[2567,2578],"[atmBalance, disp.total, isLoading]",[2712,2721],"[state, visible]",[926,938],"[open, setOpen, showDialog]",[2581,2588],"[disp, returnval, setFv, setTn, setTw, state]"]